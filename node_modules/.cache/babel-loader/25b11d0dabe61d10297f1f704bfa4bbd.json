{"ast":null,"code":"var _jsxFileName = \"/home/rz/Documentos/Personal/react-web-movies/src/components/HomeGrid/HomeGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport { get } from \"../../utils/HttpClient\";\nimport { useEffect, useState } from \"react\";\nimport { MovieCard } from \"../MovieCards/MovieCards\";\nimport styles from \"./HomeGrid.module.css\";\nimport { Loading } from \"../loading/Loading\";\nimport { useQuery } from \"../../hooks/useQuey\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function HomeGrid() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const query = useQuery();\n  const search = query.get(\"search\");\n  useEffect(() => {\n    setIsLoading(true);\n    const searchURl = search ? \"/search/movie?query=\" + search + \"&page=\" + page : \"/discover/movie?page=\" + page;\n    get(searchURl).then(data => {\n      setMovies(prevMovies => prevMovies.concat(data.results));\n      setHasMore(data.page < data.total_pages);\n      setIsLoading(false);\n    });\n  }, [search, page]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.divContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.title,\n      children: \"Recommended\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.SubTitle,\n      children: \"There will always be more to enjoy!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: movies.length,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 82\n      }, this),\n      next: () => setPage(prevPage => prevPage + 1),\n      className: styles.divContainer,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.MoviesContainer,\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: movie\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 44\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(HomeGrid, \"37MxqKVeAZYPoFgR1sqZK69r1Ik=\", false, function () {\n  return [useQuery];\n});\n\n_c = HomeGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeGrid\");","map":{"version":3,"sources":["/home/rz/Documentos/Personal/react-web-movies/src/components/HomeGrid/HomeGrid.jsx"],"names":["get","useEffect","useState","MovieCard","styles","Loading","useQuery","InfiniteScroll","HomeGrid","movies","setMovies","isLoading","setIsLoading","page","setPage","hasMore","setHasMore","query","search","searchURl","then","data","prevMovies","concat","results","total_pages","divContainer","title","SubTitle","length","prevPage","MoviesContainer","map","movie","id"],"mappings":";;;AAAA,SAAQA,GAAR,QAAkB,wBAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAGA,OAAO,SAASC,QAAT,GAAqB;AAAA;;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AAIA,QAAMe,KAAK,GAAGX,QAAQ,EAAtB;AACA,QAAMY,MAAM,GAAGD,KAAK,CAACjB,GAAN,CAAU,QAAV,CAAf;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACVW,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMO,SAAS,GAAGD,MAAM,GACtB,yBAAyBA,MAAzB,GAAmC,QAAnC,GAA8CL,IADxB,GAEtB,0BAA0BA,IAF5B;AAGAb,IAAAA,GAAG,CAACmB,SAAD,CAAH,CAAeC,IAAf,CAAqBC,IAAD,IAAS;AACzBX,MAAAA,SAAS,CAACY,UAAU,IAAIA,UAAU,CAACC,MAAX,CAAkBF,IAAI,CAACG,OAAvB,CAAf,CAAT;AACAR,MAAAA,UAAU,CAACK,IAAI,CAACR,IAAL,GAAYQ,IAAI,CAACI,WAAlB,CAAV;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD;AAKH,GAVQ,EAUN,CAACM,MAAD,EAASL,IAAT,CAVM,CAAT;;AAYA,MAAIF,SAAJ,EAAc;AACV,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBAEI;AAAK,IAAA,SAAS,EAAEP,MAAM,CAACsB,YAAvB;AAAA,4BACI;AAAI,MAAA,SAAS,EAAEtB,MAAM,CAACuB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAEvB,MAAM,CAACwB,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,cAAD;AAAgB,MAAA,UAAU,EAAEnB,MAAM,CAACoB,MAAnC;AAA2C,MAAA,OAAO,EAAEd,OAApD;AAA6D,MAAA,MAAM,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAArE;AAA0F,MAAA,IAAI,EAAE,MAAMD,OAAO,CAAEgB,QAAD,IAAcA,QAAQ,GAAE,CAAzB,CAA7G;AAA2I,MAAA,SAAS,EAAE1B,MAAM,CAACsB,YAA7J;AAAA,6BACI;AAAI,QAAA,SAAS,EAAEtB,MAAM,CAAC2B,eAAtB;AAAA,kBACKtB,MAAM,CAACuB,GAAP,CAAYC,KAAD,iBAAW,QAAC,SAAD;AAA0B,UAAA,KAAK,EAAEA;AAAjC,WAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,gBAAtB;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAaH;;GAzCe1B,Q;UASEF,Q;;;KATFE,Q","sourcesContent":["import {get} from \"../../utils/HttpClient\"\nimport { useEffect, useState } from \"react\";\nimport { MovieCard } from \"../MovieCards/MovieCards\"\nimport styles from \"./HomeGrid.module.css\"\nimport { Loading } from \"../loading/Loading\";\nimport { useQuery } from \"../../hooks/useQuey\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nexport function HomeGrid () {\n    const [movies, setMovies] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);   \n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n\n    \n    \n    const query = useQuery();\n    const search = query.get(\"search\"); \n    \n\n    useEffect(()=>{\n        setIsLoading(true);\n        const searchURl = search \n        ? \"/search/movie?query=\" + search +  \"&page=\" + page\n        : \"/discover/movie?page=\" + page;\n        get(searchURl).then((data) =>{\n            setMovies(prevMovies => prevMovies.concat(data.results) );\n            setHasMore(data.page < data.total_pages)\n            setIsLoading(false)\n        });\n    }, [search, page]);\n    \n    if (isLoading){\n        return <Loading></Loading>;\n    }\n    return(\n        \n        <div className={styles.divContainer}>\n            <h3 className={styles.title}>Recommended</h3>\n            <p className={styles.SubTitle}>There will always be more to enjoy!</p>\n            <InfiniteScroll dataLength={movies.length} hasMore={hasMore} loader={<Loading></Loading>} next={()=> (setPage((prevPage) => prevPage +1))} className={styles.divContainer}>\n                <ul className={styles.MoviesContainer}> \n                    {movies.map((movie) => <MovieCard key={movie.id} movie={movie}></MovieCard>)}\n                </ul>\n            </InfiniteScroll>\n            \n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}