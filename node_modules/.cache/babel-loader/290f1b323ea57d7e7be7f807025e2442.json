{"ast":null,"code":"var _jsxFileName = \"/home/ruzon/Documentos/rework/ReactJs-Web-Movies/src/components/PageTv.jsx\",\n    _s = $RefreshSig$();\n\nimport { get } from \"../utils/HttpClient\";\nimport { useEffect, useState } from \"react\";\nimport { TvCard } from \"./TvCard\";\nimport styles from \"./PageMovies.module.css\";\nimport { Loading } from \"./loading/Loading\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PageTv(_ref) {\n  _s();\n\n  let {\n    search\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    setIsLoading(true);\n    const searchURl = search ? \"/search/tv?query=\" + search + \"&page=\" + page : \"/discover/tv?page=\" + page;\n    get(searchURl).then(data => {\n      setMovies(prevMovies => prevMovies.concat(data.results));\n      setHasMore(data.page < data.total_pages);\n      setIsLoading(false);\n    });\n  }, [search, page]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: movies.length,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 78\n    }, this),\n    next: () => setPage(prevPage => prevPage + 1),\n    className: styles.divContainer,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.MoviesContainer,\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(TvCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 36\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PageTv, \"y2DWPaaYzGfiZYscA/VoRCZubr0=\");\n\n_c = PageTv;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageTv\");","map":{"version":3,"sources":["/home/ruzon/Documentos/rework/ReactJs-Web-Movies/src/components/PageTv.jsx"],"names":["get","useEffect","useState","TvCard","styles","Loading","InfiniteScroll","PageTv","search","movies","setMovies","isLoading","setIsLoading","page","setPage","hasMore","setHasMore","searchURl","then","data","prevMovies","concat","results","total_pages","length","prevPage","divContainer","MoviesContainer","map","movie","id"],"mappings":";;;AAAA,SAAQA,GAAR,QAAkB,qBAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AACA,OAAO,SAASC,MAAT,OAA6B;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AAGAD,EAAAA,SAAS,CAAC,MAAI;AACVW,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,SAAS,GAAGT,MAAM,GACtB,sBAAsBA,MAAtB,GAAgC,QAAhC,GAA2CK,IADrB,GAEtB,uBAAuBA,IAFzB;AAGAb,IAAAA,GAAG,CAACiB,SAAD,CAAH,CAAeC,IAAf,CAAqBC,IAAD,IAAS;AACzBT,MAAAA,SAAS,CAACU,UAAU,IAAIA,UAAU,CAACC,MAAX,CAAkBF,IAAI,CAACG,OAAvB,CAAf,CAAT;AACAN,MAAAA,UAAU,CAACG,IAAI,CAACN,IAAL,GAAYM,IAAI,CAACI,WAAlB,CAAV;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD;AAKH,GAVQ,EAUN,CAACJ,MAAD,EAASK,IAAT,CAVM,CAAT;AAaA,sBAEI,QAAC,cAAD;AAAgB,IAAA,UAAU,EAAEJ,MAAM,CAACe,MAAnC;AAA2C,IAAA,OAAO,EAAET,OAApD;AAA6D,IAAA,MAAM,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAArE;AAA0F,IAAA,IAAI,EAAE,MAAMD,OAAO,CAAEW,QAAD,IAAcA,QAAQ,GAAE,CAAzB,CAA7G;AAA2I,IAAA,SAAS,EAAErB,MAAM,CAACsB,YAA7J;AAAA,2BAGI;AAAI,MAAA,SAAS,EAAEtB,MAAM,CAACuB,eAAtB;AAAA,gBACClB,MAAM,CAACmB,GAAP,CAAYC,KAAD,iBAAW,QAAC,MAAD;AAAuB,QAAA,KAAK,EAAEA;AAA9B,SAAaA,KAAK,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA,cAAtB;AADD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH;;GA/BevB,M;;KAAAA,M","sourcesContent":["import {get} from \"../utils/HttpClient\"\nimport { useEffect, useState } from \"react\";\nimport { TvCard } from \"./TvCard\"\nimport styles from \"./PageMovies.module.css\"\nimport { Loading } from \"./loading/Loading\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nexport function PageTv ({ search }) {\n    const [movies, setMovies] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);   \n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n   \n\n    useEffect(()=>{\n        setIsLoading(true);\n        const searchURl = search \n        ? \"/search/tv?query=\" + search +  \"&page=\" + page\n        : \"/discover/tv?page=\" + page;\n        get(searchURl).then((data) =>{\n            setMovies(prevMovies => prevMovies.concat(data.results) );\n            setHasMore(data.page < data.total_pages)\n            setIsLoading(false)\n        });\n    }, [search, page]);\n    \n    \n    return(\n        \n        <InfiniteScroll dataLength={movies.length} hasMore={hasMore} loader={<Loading></Loading>} next={()=> (setPage((prevPage) => prevPage +1))} className={styles.divContainer}>\n            \n            \n            <ul className={styles.MoviesContainer}> \n            {movies.map((movie) => <TvCard key={movie.id} movie={movie}></TvCard>)}\n            </ul>\n        </InfiniteScroll>\n    )\n}"]},"metadata":{},"sourceType":"module"}